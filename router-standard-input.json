{
  "language": "Solidity",
  "sources": {
    "contracts/SilverbackUnifiedRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IERC20, ISilverbackFactory, ISilverbackPair } from \"./interfaces.sol\";\nimport { SilverbackLibrary } from \"./SilverbackLibrary.sol\";\n\ninterface IWETH9 is IERC20 {\n    function deposit() external payable;\n    function withdraw(uint256) external;\n}\n\n/// @title SilverbackUnifiedRouter\n/// @notice Unified router for Silverback DEX with protocol fee collection and external swap forwarding\n/// @dev Combines V2 AMM operations with aggregator forwarding and optimized WETH fee collection\ncontract SilverbackUnifiedRouter {\n    // ========== TYPES ==========\n    struct SwapParams {\n        address inToken;        // ERC20 or address(0) for native ETH\n        address outToken;       // ERC20 or address(0) for native ETH\n        uint256 amountIn;\n        uint256 minAmountOut;\n        address to;\n        address target;         // external DEX/aggregator\n        bytes   data;           // calldata for target\n        uint256 deadline;\n        bool    sweep;          // sweep outToken delta to `to`\n    }\n\n    struct PermitData {\n        address token;\n        uint256 value;\n        uint256 deadline;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    // ========== STORAGE ==========\n    address public immutable feeRecipient;\n    uint16 public feeBps; // <= 1000 (10%)\n    address public owner;\n\n    address public immutable factory;\n    address public immutable WETH;\n\n    uint16 public constant MAX_FEE_BPS = 1000;\n    address public constant NATIVE = address(0);\n\n    // ========== EVENTS ==========\n    event OwnerChanged(address newOwner);\n    event FeeUpdated(uint16 newFeeBps);\n    event SwapForwarded(address indexed user, address inToken, address outToken, uint amountIn, uint feeAmount, address target);\n\n    // ========== MODIFIERS ==========\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"NOT_OWNER\");\n        _;\n    }\n\n    modifier ensure(uint deadline) {\n        require(block.timestamp <= deadline, \"EXPIRED\");\n        _;\n    }\n\n    // Receive ETH from WETH contract\n    receive() external payable {\n        require(msg.sender == WETH, \"ONLY_WETH\");\n    }\n\n    // ========== CONSTRUCTOR ==========\n    constructor(\n        address _feeRecipient,\n        uint16 _feeBps,\n        address _factory,\n        address _WETH\n    ) {\n        require(\n            _feeRecipient != address(0) &&\n            _factory != address(0) &&\n            _WETH != address(0),\n            \"ZERO_ADDRESS\"\n        );\n        require(_feeBps <= MAX_FEE_BPS, \"FEE_TOO_HIGH\");\n\n        feeRecipient = _feeRecipient;\n        feeBps = _feeBps;\n        owner = msg.sender;\n        factory = _factory;\n        WETH = _WETH;\n    }\n\n    // ========== ADMIN ==========\n    function setOwner(address _owner) external onlyOwner {\n        owner = _owner;\n        emit OwnerChanged(_owner);\n    }\n\n    function setFeeBps(uint16 _bps) external onlyOwner {\n        require(_bps <= MAX_FEE_BPS, \"FEE_TOO_HIGH\");\n        feeBps = _bps;\n        emit FeeUpdated(_bps);\n    }\n\n    // ========== INTERNAL UTILS ==========\n    function _balanceOf(address token) internal view returns (uint256) {\n        if (token == NATIVE) return address(this).balance;\n        return IERC20(token).balanceOf(address(this));\n    }\n\n    function _safeTransfer(address token, address to, uint value) private {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FAILED\");\n    }\n\n    function _safeTransferFrom(address token, address from, address to, uint value) private {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value)\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FROM_FAILED\");\n    }\n\n    function _forceApprove(address token, address spender, uint value) private {\n        (bool s1, bytes memory d1) = token.staticcall(\n            abi.encodeWithSelector(IERC20.allowance.selector, address(this), spender)\n        );\n        if (s1 && d1.length >= 32 && abi.decode(d1, (uint)) > 0) {\n            (bool s2, ) = token.call(\n                abi.encodeWithSelector(IERC20.approve.selector, spender, 0)\n            );\n            require(s2, \"APPROVE_RESET_FAILED\");\n        }\n        (bool s3, ) = token.call(\n            abi.encodeWithSelector(IERC20.approve.selector, spender, value)\n        );\n        require(s3, \"APPROVE_FAILED\");\n    }\n\n    function _revertMsg(bytes memory ret) private pure returns (string memory) {\n        if (ret.length < 68) return \"TARGET_CALL_FAILED\";\n        assembly {\n            ret := add(ret, 0x04)\n        }\n        return abi.decode(ret, (string));\n    }\n\n    /// @notice Collect fee in input token (industry standard - simple & gas efficient)\n    /// @dev Fee will be converted to WETH/USDC off-chain by bot\n    function _collectFee(address inToken, uint256 feeAmount) private {\n        if (feeAmount == 0) return;\n\n        if (inToken == NATIVE) {\n            // Send native ETH to fee recipient\n            (bool success, ) = payable(feeRecipient).call{value: feeAmount}(\"\");\n            require(success, \"FEE_TRANSFER_FAILED\");\n        } else {\n            // Send ERC20 to fee recipient\n            _safeTransfer(inToken, feeRecipient, feeAmount);\n        }\n    }\n\n    // ========== EXTERNAL SWAP FORWARDING ==========\n    /// @notice Forward swap to external aggregator with fee collection in WETH\n    function swapAndForward(SwapParams calldata p, PermitData calldata permit)\n        external\n        payable\n        ensure(p.deadline)\n    {\n        if (permit.token != address(0)) {\n            IERC20Permit(permit.token).permit(\n                msg.sender,\n                address(this),\n                permit.value,\n                permit.deadline,\n                permit.v,\n                permit.r,\n                permit.s\n            );\n        }\n        _swapAndForward(p);\n    }\n\n    function swapAndForward(SwapParams calldata p) external payable ensure(p.deadline) {\n        _swapAndForward(p);\n    }\n\n    function _swapAndForward(SwapParams calldata p) internal {\n        require(p.amountIn > 0 && p.target != address(0), \"INVALID_PARAMS\");\n\n        uint fee = (p.amountIn * feeBps) / 10_000;\n        uint toTarget = p.amountIn - fee;\n        uint preOut = _balanceOf(p.outToken);\n\n        // Handle native ETH input\n        if (p.inToken == NATIVE) {\n            require(msg.value >= p.amountIn, \"INSUFFICIENT_ETH\");\n\n            // Collect fee in native ETH\n            _collectFee(NATIVE, fee);\n\n            // Forward remaining ETH to target\n            (bool ok, bytes memory ret) = p.target.call{value: toTarget}(p.data);\n            require(ok, _revertMsg(ret));\n\n            emit SwapForwarded(msg.sender, p.inToken, p.outToken, p.amountIn, fee, p.target);\n        }\n        // Handle ERC20 input\n        else {\n            _safeTransferFrom(p.inToken, msg.sender, address(this), p.amountIn);\n\n            // Collect fee in input token\n            _collectFee(p.inToken, fee);\n\n            // Approve and forward to target\n            _forceApprove(p.inToken, p.target, toTarget);\n            (bool ok, bytes memory ret) = p.target.call(p.data);\n            require(ok, _revertMsg(ret));\n\n            emit SwapForwarded(msg.sender, p.inToken, p.outToken, p.amountIn, fee, p.target);\n        }\n\n        // Sweep output tokens if requested\n        if (p.sweep) {\n            uint postOut = _balanceOf(p.outToken);\n            uint gained = postOut > preOut ? postOut - preOut : 0;\n            require(gained >= p.minAmountOut, \"INSUFFICIENT_OUTPUT\");\n\n            if (gained > 0) {\n                if (p.outToken == NATIVE) {\n                    (bool s, ) = payable(p.to).call{value: gained}(\"\");\n                    require(s, \"ETH_TRANSFER_FAILED\");\n                } else {\n                    _safeTransfer(p.outToken, p.to, gained);\n                }\n            }\n        }\n    }\n\n    // ========== SILVERBACK V2 AMM OPERATIONS ==========\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\n        if (ISilverbackFactory(factory).getPair(tokenA, tokenB) == address(0)) {\n            ISilverbackFactory(factory).createPair(tokenA, tokenB);\n        }\n        (amountA, amountB) = _calculateLiquidity(\n            tokenA,\n            tokenB,\n            amountADesired,\n            amountBDesired,\n            amountAMin,\n            amountBMin\n        );\n        address pair = ISilverbackFactory(factory).getPair(tokenA, tokenB);\n        _safeTransferFrom(tokenA, msg.sender, pair, amountA);\n        _safeTransferFrom(tokenB, msg.sender, pair, amountB);\n        liquidity = ISilverbackPair(pair).mint(to);\n    }\n\n    function _calculateLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin\n    ) internal view returns (uint amountA, uint amountB) {\n        (uint reserveA, uint reserveB) = SilverbackLibrary.getReserves(factory, tokenA, tokenB);\n        if (reserveA == 0 && reserveB == 0) {\n            (amountA, amountB) = (amountADesired, amountBDesired);\n        } else {\n            uint amountBOptimal = SilverbackLibrary.quote(amountADesired, reserveA, reserveB);\n            if (amountBOptimal <= amountBDesired) {\n                require(amountBOptimal >= amountBMin, \"INSUFFICIENT_B\");\n                (amountA, amountB) = (amountADesired, amountBOptimal);\n            } else {\n                uint amountAOptimal = SilverbackLibrary.quote(amountBDesired, reserveB, reserveA);\n                require(amountAOptimal >= amountAMin, \"INSUFFICIENT_A\");\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\n            }\n        }\n    }\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\n        // Create pair if it doesn't exist\n        if (ISilverbackFactory(factory).getPair(token, WETH) == address(0)) {\n            ISilverbackFactory(factory).createPair(token, WETH);\n        }\n\n        (amountToken, amountETH) = _calculateLiquidity(\n            token,\n            WETH,\n            amountTokenDesired,\n            msg.value,\n            amountTokenMin,\n            amountETHMin\n        );\n        address pair = ISilverbackFactory(factory).getPair(token, WETH);\n        _safeTransferFrom(token, msg.sender, pair, amountToken);\n        IWETH9(WETH).deposit{value: amountETH}();\n        _safeTransfer(WETH, pair, amountETH);\n        liquidity = ISilverbackPair(pair).mint(to);\n        // Refund excess ETH\n        if (msg.value > amountETH) {\n            (bool success, ) = msg.sender.call{value: msg.value - amountETH}(\"\");\n            require(success, \"ETH_REFUND_FAILED\");\n        }\n    }\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external ensure(deadline) returns (uint amountA, uint amountB) {\n        address pair = ISilverbackFactory(factory).getPair(tokenA, tokenB);\n        _safeTransferFrom(pair, msg.sender, pair, liquidity);\n        (uint amount0, uint amount1) = ISilverbackPair(pair).burn(to);\n        (address token0, ) = SilverbackLibrary.sortTokens(tokenA, tokenB);\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\n        require(amountA >= amountAMin, \"INSUFFICIENT_A\");\n        require(amountB >= amountBMin, \"INSUFFICIENT_B\");\n    }\n\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external ensure(deadline) returns (uint amountToken, uint amountETH) {\n        address pair = ISilverbackFactory(factory).getPair(token, WETH);\n        _safeTransferFrom(pair, msg.sender, pair, liquidity);\n        (uint amount0, uint amount1) = ISilverbackPair(pair).burn(address(this));\n        (address token0, ) = SilverbackLibrary.sortTokens(token, WETH);\n        (amountToken, amountETH) = token == token0 ? (amount0, amount1) : (amount1, amount0);\n        require(amountToken >= amountTokenMin, \"INSUFFICIENT_TOKEN\");\n        require(amountETH >= amountETHMin, \"INSUFFICIENT_ETH\");\n        _safeTransfer(token, to, amountToken);\n        IWETH9(WETH).withdraw(amountETH);\n        (bool success, ) = to.call{value: amountETH}(\"\");\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external ensure(deadline) returns (uint[] memory amounts) {\n        // Calculate fee and net amount\n        uint fee = (amountIn * feeBps) / 10_000;\n        uint netIn = amountIn - fee;\n\n        // Collect fee from user in input token\n        _safeTransferFrom(path[0], msg.sender, address(this), amountIn);\n        _collectFee(path[0], fee);\n\n        // Calculate amounts and execute swap\n        amounts = SilverbackLibrary.getAmountsOut(factory, netIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, \"INSUFFICIENT_OUTPUT\");\n        _safeTransfer(path[0], SilverbackLibrary.pairFor(factory, path[0], path[1]), netIn);\n        _swap(amounts, path, to);\n    }\n\n    function swapExactETHForTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable ensure(deadline) returns (uint[] memory amounts) {\n        require(path[0] == WETH, \"INVALID_PATH\");\n\n        // Calculate fee and net amount\n        uint fee = (msg.value * feeBps) / 10_000;\n        uint netIn = msg.value - fee;\n\n        // Collect fee in native ETH\n        _collectFee(NATIVE, fee);\n\n        // Wrap remaining ETH to WETH\n        IWETH9(WETH).deposit{value: netIn}();\n\n        // Calculate amounts and execute swap\n        amounts = SilverbackLibrary.getAmountsOut(factory, netIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, \"INSUFFICIENT_OUTPUT\");\n        _safeTransfer(WETH, SilverbackLibrary.pairFor(factory, path[0], path[1]), amounts[0]);\n        _swap(amounts, path, to);\n    }\n\n    function swapExactTokensForETH(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external ensure(deadline) returns (uint[] memory amounts) {\n        require(path[path.length - 1] == WETH, \"INVALID_PATH\");\n\n        // Calculate fee and net amount\n        uint fee = (amountIn * feeBps) / 10_000;\n        uint netIn = amountIn - fee;\n\n        // Collect fee from user in input token\n        _safeTransferFrom(path[0], msg.sender, address(this), amountIn);\n        _collectFee(path[0], fee);\n\n        // Calculate amounts and execute swap\n        amounts = SilverbackLibrary.getAmountsOut(factory, netIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, \"INSUFFICIENT_OUTPUT\");\n        _safeTransfer(path[0], SilverbackLibrary.pairFor(factory, path[0], path[1]), netIn);\n        _swap(amounts, path, address(this));\n\n        // Unwrap WETH and send ETH to user\n        IWETH9(WETH).withdraw(amounts[amounts.length - 1]);\n        (bool success, ) = payable(to).call{value: amounts[amounts.length - 1]}(\"\");\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n\n    function _swap(uint[] memory amounts, address[] memory path, address _to) internal {\n        for (uint i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0, ) = SilverbackLibrary.sortTokens(input, output);\n            uint amountOut = amounts[i + 1];\n            (uint amount0Out, uint amount1Out) = input == token0\n                ? (uint(0), amountOut)\n                : (amountOut, uint(0));\n            address to = i < path.length - 2\n                ? SilverbackLibrary.pairFor(factory, output, path[i + 2])\n                : _to;\n            ISilverbackPair(SilverbackLibrary.pairFor(factory, input, output)).swap(\n                amount0Out,\n                amount1Out,\n                to,\n                new bytes(0)\n            );\n        }\n    }\n}\n\ninterface IERC20Permit {\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "contracts/SilverbackLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { ISilverbackFactory, ISilverbackPair } from \"./interfaces.sol\";\nimport { SilverbackPair } from \"./SilverbackPair.sol\";\n\nlibrary SilverbackLibrary {\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, \"IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), \"ZERO_ADDRESS\");\n    }\n\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n        bytes32 hash = keccak256(\n            abi.encodePacked(bytes1(0xff), factory, salt, keccak256(type(SilverbackPair).creationCode))\n        );\n        pair = address(uint160(uint(hash)));\n    }\n\n    function getReserves(address factory, address tokenA, address tokenB)\n        internal\n        view\n        returns (uint reserveA, uint reserveB)\n    {\n        (address token0, ) = sortTokens(tokenA, tokenB);\n        address pair = ISilverbackFactory(factory).getPair(tokenA, tokenB);\n        require(pair != address(0), \"PAIR_NOT_FOUND\");\n        (uint112 reserve0, uint112 reserve1, ) = ISilverbackPair(pair).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (uint(reserve0), uint(reserve1)) : (uint(reserve1), uint(reserve0));\n    }\n\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, \"INSUFFICIENT_AMOUNT\");\n        require(reserveA > 0 && reserveB > 0, \"INSUFFICIENT_LIQUIDITY\");\n        amountB = (amountA * reserveB) / reserveA;\n    }\n\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, \"INSUFFICIENT_INPUT_AMOUNT\");\n        require(reserveIn > 0 && reserveOut > 0, \"INSUFFICIENT_LIQUIDITY\");\n        uint amountInWithFee = amountIn * 997;\n        uint numerator = amountInWithFee * reserveOut;\n        uint denominator = reserveIn * 1000 + amountInWithFee;\n        amountOut = numerator / denominator;\n    }\n\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n        require(amountOut > 0, \"INSUFFICIENT_OUTPUT_AMOUNT\");\n        require(reserveIn > 0 && reserveOut > 0, \"INSUFFICIENT_LIQUIDITY\");\n        uint numerator = reserveIn * amountOut * 1000;\n        uint denominator = (reserveOut - amountOut) * 997;\n        amountIn = (numerator / denominator) + 1;\n    }\n\n    function getAmountsOut(address factory, uint amountIn, address[] memory path)\n        internal\n        view\n        returns (uint[] memory amounts)\n    {\n        require(path.length >= 2, \"INVALID_PATH\");\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    function getAmountsIn(address factory, uint amountOut, address[] memory path)\n        internal\n        view\n        returns (uint[] memory amounts)\n    {\n        require(path.length >= 2, \"INVALID_PATH\");\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n"
    },
    "contracts/SilverbackFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { ISilverbackFactory, ISilverbackPair } from \"./interfaces.sol\";\nimport { SilverbackPair } from \"./SilverbackPair.sol\";\n\ncontract SilverbackFactory is ISilverbackFactory {\n    address public override feeTo;\n    address public override feeToSetter;\n    address[] public allPairs;\n    mapping(address => mapping(address => address)) public override getPair;\n    uint256 private pairCount;\n\n    event FeeToSet(address indexed feeTo);\n    event FeeToSetterSet(address indexed feeToSetter);\n\n    constructor(address _feeToSetter) {\n        require(_feeToSetter != address(0), \"ZERO_ADDRESS\");\n        feeToSetter = _feeToSetter;\n        feeTo = _feeToSetter;\n        pairCount = 0;\n    }\n\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\n        require(tokenA != tokenB, \"IDENTICAL_ADDRESSES\");\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(getPair[token0][token1] == address(0), \"PAIR_EXISTS\");\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n        bytes memory bytecode = type(SilverbackPair).creationCode;\n        assembly {\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        ISilverbackPair(pair).initialize(token0, token1);\n        getPair[token0][token1] = pair;\n        getPair[token1][token0] = pair;\n        allPairs.push(pair);\n        pairCount += 1;\n        emit PairCreated(token0, token1, pair, pairCount);\n    }\n\n    function allPairsLength() external view override returns (uint256) {\n        return pairCount;\n    }\n\n    function setFeeTo(address _feeTo) external override {\n        require(msg.sender == feeToSetter, \"FORBIDDEN\");\n        require(_feeTo != address(0), \"ZERO_ADDRESS\");\n        feeTo = _feeTo;\n        emit FeeToSet(_feeTo);\n    }\n\n    function setFeeToSetter(address _feeToSetter) external override {\n        require(msg.sender == feeToSetter, \"FORBIDDEN\");\n        require(_feeToSetter != address(0), \"ZERO_ADDRESS\");\n        feeToSetter = _feeToSetter;\n        emit FeeToSetterSet(_feeToSetter);\n    }\n\n    function pairExists(address tokenA, address tokenB) external view returns (bool) {\n        (address token0, ) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        return getPair[token0][tokenB] != address(0);\n    }\n\n    function getPairAddress(address tokenA, address tokenB) external view returns (address) {\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        return getPair[token0][token1];\n    }\n\n    function computePairAddress(address tokenA, address tokenB) external view returns (address computed) {\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n        bytes memory bytecode = type(SilverbackPair).creationCode;\n        bytes32 hash = keccak256(abi.encodePacked(bytes1(0xff), address(this), salt, keccak256(bytecode)));\n        return address(uint160(uint256(hash)));\n    }\n}\n"
    },
    "contracts/SilverbackPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IERC20, ISilverbackCallee, ISilverbackPair } from \"./interfaces.sol\";\nimport { Math } from \"./libraries/Math.sol\";\nimport { UQ112x112 } from \"./libraries/UQ112x112.sol\";\n\ncontract SilverbackPair is ISilverbackPair {\n    using UQ112x112 for uint224;\n\n    address public factory;\n    address public token0;\n    address public token1;\n\n    uint112 private reserve0;\n    uint112 private reserve1;\n    uint32 private blockTimestampLast;\n\n    uint256 public totalSupply;\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    bytes32 public DOMAIN_SEPARATOR;\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\n        \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n    );\n    mapping(address => uint256) public nonces;\n\n    string private constant NAME = \"Silverback-LP\";\n    string private constant SYMBOL = \"SB-LP\";\n    uint8 private constant DECIMALS = 18;\n    uint256 private constant MINIMUM_LIQUIDITY = 1000;\n\n    constructor() {\n        factory = msg.sender;\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(NAME)),\n                keccak256(bytes(\"1\")),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    function name() public pure returns (string memory) { return NAME; }\n    function symbol() public pure returns (string memory) { return SYMBOL; }\n    function decimals() public pure returns (uint8) { return DECIMALS; }\n\n    function initialize(address _token0, address _token1) external override {\n        require(msg.sender == factory, \"FORBIDDEN\");\n        token0 = _token0;\n        token1 = _token1;\n    }\n\n    function approve(address spender, uint256 value) external returns (bool) {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function transfer(address to, uint256 value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool) {\n        uint256 allowed = allowance[from][msg.sender];\n        if (allowed != type(uint256).max) {\n            allowance[from][msg.sender] = allowed - value;\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function _transfer(address from, address to, uint256 value) private {\n        require(to != address(0), \"TRANSFER_TO_ZERO\");\n        balanceOf[from] -= value;\n        balanceOf[to] += value;\n        emit Transfer(from, to, value);\n    }\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        require(deadline >= block.timestamp, \"EXPIRED\");\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n            )\n        );\n        address recovered = ecrecover(digest, v, r, s);\n        require(recovered != address(0) && recovered == owner, \"INVALID_SIGNATURE\");\n        allowance[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function getReserves() external view returns (uint112, uint112, uint32) {\n        return (reserve0, reserve1, blockTimestampLast);\n    }\n\n    function mint(address to) external override returns (uint256 liquidity) {\n        uint112 _reserve0 = reserve0;\n        uint112 _reserve1 = reserve1;\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\n        uint256 amount0 = balance0 - _reserve0;\n        uint256 amount1 = balance1 - _reserve1;\n        if (totalSupply == 0) {\n            liquidity = Math.sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\n            _mint(address(0), MINIMUM_LIQUIDITY);\n        } else {\n            liquidity = Math.min((amount0 * totalSupply) / _reserve0, (amount1 * totalSupply) / _reserve1);\n        }\n        require(liquidity > 0, \"INSUFFICIENT_LIQUIDITY_MINTED\");\n        _mint(to, liquidity);\n        _update(balance0, balance1);\n        emit Mint(msg.sender, amount0, amount1);\n    }\n\n    function burn(address to) external override returns (uint256 amount0, uint256 amount1) {\n        require(to != address(0), \"ZERO_ADDRESS\");\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\n        uint256 liquidity = balanceOf[address(this)];\n        require(liquidity > 0, \"INSUFFICIENT_LIQUIDITY\");\n        amount0 = (liquidity * balance0) / totalSupply;\n        amount1 = (liquidity * balance1) / totalSupply;\n        _burn(address(this), liquidity);\n        _safeTransfer(token0, to, amount0);\n        _safeTransfer(token1, to, amount1);\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)));\n        emit Burn(msg.sender, amount0, amount1, to);\n    }\n\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external override {\n        require(amount0Out > 0 || amount1Out > 0, \"INSUFFICIENT_OUTPUT\");\n        require(to != token0 && to != token1, \"INVALID_TO\");\n        (uint112 _reserve0, uint112 _reserve1, ) = (reserve0, reserve1, blockTimestampLast);\n        if (amount0Out > 0) _safeTransfer(token0, to, amount0Out);\n        if (amount1Out > 0) _safeTransfer(token1, to, amount1Out);\n        if (data.length > 0) {\n            ISilverbackCallee(to).silverbackV2Call(msg.sender, amount0Out, amount1Out, data);\n        }\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\n        uint256 amount0In = balance0 > (_reserve0 - amount0Out) ? balance0 - (_reserve0 - amount0Out) : 0;\n        uint256 amount1In = balance1 > (_reserve1 - amount1Out) ? balance1 - (_reserve1 - amount1Out) : 0;\n        require(amount0In > 0 || amount1In > 0, \"INSUFFICIENT_INPUT\");\n        {\n            uint256 balance0Adjusted = balance0 * 1000 - amount0In * 3;\n            uint256 balance1Adjusted = balance1 * 1000 - amount1In * 3;\n            require(balance0Adjusted * balance1Adjusted >= uint256(_reserve0) * _reserve1 * 1_000_000, \"K\");\n        }\n        _update(balance0, balance1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    function skim(address to) external override {\n        _safeTransfer(token0, to, IERC20(token0).balanceOf(address(this)) - reserve0);\n        _safeTransfer(token1, to, IERC20(token1).balanceOf(address(this)) - reserve1);\n    }\n\n    function sync() external override {\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)));\n    }\n\n    function _mint(address to, uint256 value) private {\n        totalSupply += value;\n        balanceOf[to] += value;\n        emit Transfer(address(0), to, value);\n    }\n\n    function _burn(address from, uint256 value) private {\n        balanceOf[from] -= value;\n        totalSupply -= value;\n        emit Transfer(from, address(0), value);\n    }\n\n    function _safeTransfer(address token, address to, uint256 value) private {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FAILED\");\n    }\n\n    function _update(uint256 balance0, uint256 balance1) private {\n        require(balance0 <= type(uint112).max && balance1 <= type(uint112).max, \"OVERFLOW\");\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n        reserve0 = uint112(balance0);\n        reserve1 = uint112(balance1);\n        blockTimestampLast = blockTimestamp;\n        emit Sync(reserve0, reserve1);\n    }\n}\n"
    },
    "contracts/interfaces.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transfer(address to, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function decimals() external view returns (uint8);\n}\n\ninterface ISilverbackCallee {\n    function silverbackV2Call(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external;\n}\n\ninterface ISilverbackPair {\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address owner) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n    function transfer(address to, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n    function initialize(address, address) external;\n    function mint(address to) external returns (uint256 liquidity);\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\n    event Sync(uint112 reserve0, uint112 reserve1);\n}\n\ninterface ISilverbackFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint256) external view returns (address pair);\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title Math Library (min and sqrt)\nlibrary Math {\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x < y ? x : y;\n    }\n\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "contracts/libraries/UQ112x112.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title UQ112x112 — Fixed point library compatible with Uniswap V2\nlibrary UQ112x112 {\n    uint224 internal constant Q112 = 2**112;\n\n    function encode(uint112 y) internal pure returns (uint224 z) {\n        z = uint224(y) * Q112;\n    }\n\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n        z = x / uint224(y);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}