{
  "language": "Solidity",
  "sources": {
    "contracts/SilverbackFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { ISilverbackFactory, ISilverbackPair } from \"./interfaces.sol\";\nimport { SilverbackPair } from \"./SilverbackPair.sol\";\n\ncontract SilverbackFactory is ISilverbackFactory {\n    address public override feeTo;\n    address public override feeToSetter;\n    address[] public allPairs;\n    mapping(address => mapping(address => address)) public override getPair;\n    uint256 private pairCount;\n\n    event FeeToSet(address indexed feeTo);\n    event FeeToSetterSet(address indexed feeToSetter);\n\n    constructor(address _feeToSetter) {\n        require(_feeToSetter != address(0), \"ZERO_ADDRESS\");\n        feeToSetter = _feeToSetter;\n        feeTo = _feeToSetter;\n        pairCount = 0;\n    }\n\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\n        require(tokenA != tokenB, \"IDENTICAL_ADDRESSES\");\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(getPair[token0][token1] == address(0), \"PAIR_EXISTS\");\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n        bytes memory bytecode = type(SilverbackPair).creationCode;\n        assembly {\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        ISilverbackPair(pair).initialize(token0, token1);\n        getPair[token0][token1] = pair;\n        getPair[token1][token0] = pair;\n        allPairs.push(pair);\n        pairCount += 1;\n        emit PairCreated(token0, token1, pair, pairCount);\n    }\n\n    function allPairsLength() external view override returns (uint256) {\n        return pairCount;\n    }\n\n    function setFeeTo(address _feeTo) external override {\n        require(msg.sender == feeToSetter, \"FORBIDDEN\");\n        require(_feeTo != address(0), \"ZERO_ADDRESS\");\n        feeTo = _feeTo;\n        emit FeeToSet(_feeTo);\n    }\n\n    function setFeeToSetter(address _feeToSetter) external override {\n        require(msg.sender == feeToSetter, \"FORBIDDEN\");\n        require(_feeToSetter != address(0), \"ZERO_ADDRESS\");\n        feeToSetter = _feeToSetter;\n        emit FeeToSetterSet(_feeToSetter);\n    }\n\n    function pairExists(address tokenA, address tokenB) external view returns (bool) {\n        (address token0, ) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        return getPair[token0][tokenB] != address(0);\n    }\n\n    function getPairAddress(address tokenA, address tokenB) external view returns (address) {\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        return getPair[token0][token1];\n    }\n\n    function computePairAddress(address tokenA, address tokenB) external view returns (address computed) {\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n        bytes memory bytecode = type(SilverbackPair).creationCode;\n        bytes32 hash = keccak256(abi.encodePacked(bytes1(0xff), address(this), salt, keccak256(bytecode)));\n        return address(uint160(uint256(hash)));\n    }\n}\n"
    },
    "contracts/SilverbackPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IERC20, ISilverbackCallee, ISilverbackPair } from \"./interfaces.sol\";\nimport { Math } from \"./libraries/Math.sol\";\nimport { UQ112x112 } from \"./libraries/UQ112x112.sol\";\n\ncontract SilverbackPair is ISilverbackPair {\n    using UQ112x112 for uint224;\n\n    address public factory;\n    address public token0;\n    address public token1;\n\n    uint112 private reserve0;\n    uint112 private reserve1;\n    uint32 private blockTimestampLast;\n\n    uint256 public totalSupply;\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    bytes32 public DOMAIN_SEPARATOR;\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\n        \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n    );\n    mapping(address => uint256) public nonces;\n\n    string private constant NAME = \"Silverback-LP\";\n    string private constant SYMBOL = \"SB-LP\";\n    uint8 private constant DECIMALS = 18;\n    uint256 private constant MINIMUM_LIQUIDITY = 1000;\n\n    constructor() {\n        factory = msg.sender;\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(NAME)),\n                keccak256(bytes(\"1\")),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    function name() public pure returns (string memory) { return NAME; }\n    function symbol() public pure returns (string memory) { return SYMBOL; }\n    function decimals() public pure returns (uint8) { return DECIMALS; }\n\n    function initialize(address _token0, address _token1) external override {\n        require(msg.sender == factory, \"FORBIDDEN\");\n        token0 = _token0;\n        token1 = _token1;\n    }\n\n    function approve(address spender, uint256 value) external returns (bool) {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function transfer(address to, uint256 value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool) {\n        uint256 allowed = allowance[from][msg.sender];\n        if (allowed != type(uint256).max) {\n            allowance[from][msg.sender] = allowed - value;\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function _transfer(address from, address to, uint256 value) private {\n        require(to != address(0), \"TRANSFER_TO_ZERO\");\n        balanceOf[from] -= value;\n        balanceOf[to] += value;\n        emit Transfer(from, to, value);\n    }\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        require(deadline >= block.timestamp, \"EXPIRED\");\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n            )\n        );\n        address recovered = ecrecover(digest, v, r, s);\n        require(recovered != address(0) && recovered == owner, \"INVALID_SIGNATURE\");\n        allowance[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function getReserves() external view returns (uint112, uint112, uint32) {\n        return (reserve0, reserve1, blockTimestampLast);\n    }\n\n    function mint(address to) external override returns (uint256 liquidity) {\n        uint112 _reserve0 = reserve0;\n        uint112 _reserve1 = reserve1;\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\n        uint256 amount0 = balance0 - _reserve0;\n        uint256 amount1 = balance1 - _reserve1;\n        if (totalSupply == 0) {\n            liquidity = Math.sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\n            _mint(address(0), MINIMUM_LIQUIDITY);\n        } else {\n            liquidity = Math.min((amount0 * totalSupply) / _reserve0, (amount1 * totalSupply) / _reserve1);\n        }\n        require(liquidity > 0, \"INSUFFICIENT_LIQUIDITY_MINTED\");\n        _mint(to, liquidity);\n        _update(balance0, balance1);\n        emit Mint(msg.sender, amount0, amount1);\n    }\n\n    function burn(address to) external override returns (uint256 amount0, uint256 amount1) {\n        require(to != address(0), \"ZERO_ADDRESS\");\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\n        uint256 liquidity = balanceOf[address(this)];\n        require(liquidity > 0, \"INSUFFICIENT_LIQUIDITY\");\n        amount0 = (liquidity * balance0) / totalSupply;\n        amount1 = (liquidity * balance1) / totalSupply;\n        _burn(address(this), liquidity);\n        _safeTransfer(token0, to, amount0);\n        _safeTransfer(token1, to, amount1);\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)));\n        emit Burn(msg.sender, amount0, amount1, to);\n    }\n\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external override {\n        require(amount0Out > 0 || amount1Out > 0, \"INSUFFICIENT_OUTPUT\");\n        require(to != token0 && to != token1, \"INVALID_TO\");\n        (uint112 _reserve0, uint112 _reserve1, ) = (reserve0, reserve1, blockTimestampLast);\n        if (amount0Out > 0) _safeTransfer(token0, to, amount0Out);\n        if (amount1Out > 0) _safeTransfer(token1, to, amount1Out);\n        if (data.length > 0) {\n            ISilverbackCallee(to).silverbackV2Call(msg.sender, amount0Out, amount1Out, data);\n        }\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\n        uint256 amount0In = balance0 > (_reserve0 - amount0Out) ? balance0 - (_reserve0 - amount0Out) : 0;\n        uint256 amount1In = balance1 > (_reserve1 - amount1Out) ? balance1 - (_reserve1 - amount1Out) : 0;\n        require(amount0In > 0 || amount1In > 0, \"INSUFFICIENT_INPUT\");\n        {\n            uint256 balance0Adjusted = balance0 * 1000 - amount0In * 3;\n            uint256 balance1Adjusted = balance1 * 1000 - amount1In * 3;\n            require(balance0Adjusted * balance1Adjusted >= uint256(_reserve0) * _reserve1 * 1_000_000, \"K\");\n        }\n        _update(balance0, balance1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    function skim(address to) external override {\n        _safeTransfer(token0, to, IERC20(token0).balanceOf(address(this)) - reserve0);\n        _safeTransfer(token1, to, IERC20(token1).balanceOf(address(this)) - reserve1);\n    }\n\n    function sync() external override {\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)));\n    }\n\n    function _mint(address to, uint256 value) private {\n        totalSupply += value;\n        balanceOf[to] += value;\n        emit Transfer(address(0), to, value);\n    }\n\n    function _burn(address from, uint256 value) private {\n        balanceOf[from] -= value;\n        totalSupply -= value;\n        emit Transfer(from, address(0), value);\n    }\n\n    function _safeTransfer(address token, address to, uint256 value) private {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FAILED\");\n    }\n\n    function _update(uint256 balance0, uint256 balance1) private {\n        require(balance0 <= type(uint112).max && balance1 <= type(uint112).max, \"OVERFLOW\");\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n        reserve0 = uint112(balance0);\n        reserve1 = uint112(balance1);\n        blockTimestampLast = blockTimestamp;\n        emit Sync(reserve0, reserve1);\n    }\n}\n"
    },
    "contracts/interfaces.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transfer(address to, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function decimals() external view returns (uint8);\n}\n\ninterface ISilverbackCallee {\n    function silverbackV2Call(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external;\n}\n\ninterface ISilverbackPair {\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address owner) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n    function transfer(address to, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n    function initialize(address, address) external;\n    function mint(address to) external returns (uint256 liquidity);\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\n    event Sync(uint112 reserve0, uint112 reserve1);\n}\n\ninterface ISilverbackFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint256) external view returns (address pair);\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title Math Library (min and sqrt)\nlibrary Math {\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x < y ? x : y;\n    }\n\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "contracts/libraries/UQ112x112.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title UQ112x112 — Fixed point library compatible with Uniswap V2\nlibrary UQ112x112 {\n    uint224 internal constant Q112 = 2**112;\n\n    function encode(uint112 y) internal pure returns (uint224 z) {\n        z = uint224(y) * Q112;\n    }\n\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n        z = x / uint224(y);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}